package renderEngine;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;

import models.RawModel;

public class OBJLoader {

	public static RawModel loadObjModel(String fileName,Loader loader){
		FileReader fr = null;
		try {
			fr = new FileReader(new File("res/"+ fileName + ".obj"));
		} catch (FileNotFoundException e) {
			System.out.println("Could not load file!");
			e.printStackTrace();
		}
		
		BufferedReader reader = new BufferedReader(fr);
		String line;
		List<Vector3f> vertices = new ArrayList<Vector3f>();
		List<Vector2f> textures = new ArrayList<Vector2f>();
		List<Vector3f> normals = new ArrayList<Vector3f>();
		List<Integer> indices = new ArrayList<Integer>();
		float[] verticesArray = null;
		float[] texturesArray = null;
		float[] normalsArray = null;
		int []  intArray = null;
		
		try{
			while(true){
				line = reader.readLine();
				String[] currentline = line.split(" ");
				if(line.startsWith("v ")){
					Vector3f vertex = new Vector3f(Float.parseFloat(currentline[1]),Float.parseFloat(currentline[2]),
							Float.parseFloat(currentline[3]));
					vertices.add(vertex);
					}else if(line.startsWith("vt ")){
						Vector2f texture = new Vector2f(Float.parseFloat(currentline[1]),Float.parseFloat(currentline[2]));
						textures.add(texture);
				}else if(line.startsWith("vn ")){
					Vector3f normal = new Vector3f(Float.parseFloat(currentline[1]),Float.parseFloat(currentline[2]),
							Float.parseFloat(currentline[3]));
					normals.add(normal);
				}else if(line.startsWith("f ")){
					texturesArray = new  float[vertices.size()*2];
					normalsArray = new float[vertices.size()* 3];
					break;
				}
			}
			while(line !=null){
				if(!line.startsWith("f ")){
					line = reader.readLine();
					continue;
				}
				String[] currenLine = line.split(" ");
				String[] vertex1 = currenLine[1].split("/");
				String[] vertex2 = currenLine[2].split("/");
				String[] vertex3 = currenLine[3].split("/");
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		
	}
	private static void processVertex(String[] vertexData,List<Integer> indices,
			List<Vector2f> textures,List<Vector3f> normals,float[] textureArray,float[] normalsArray)
	{
		int currentVertexPointer = Integer.parseInt(vertexData[0]) -1;
		indices.add(currentVertexPointer);
		Vector2f currentTex = textures.get(Integer.parseInt(vertexData[1]-1));
		
	}
	
}
